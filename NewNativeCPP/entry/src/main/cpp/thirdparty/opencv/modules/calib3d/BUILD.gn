# Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# opencv calib3d build

import("//build/ohos.gni")
import("//third_party/opencv/opencv_common_cfg.gni")

config("opencv_calib3d_config") {
    cflags_cc = opencv_lib_common_cflags_cc
    defines = opencv_lib_common_defines
}

action("ocv_cl2cpp_calib3d") {
    script = "//third_party/opencv/build_cpp_from_cl.py"
    outputs = [
        "$target_out_dir/opencl_kernels_calib3d.cpp",
        "$target_out_dir/opencl_kernels_calib3d.hpp",
    ]
    cl_path = rebase_path("//third_party/opencv/modules/calib3d/src/opencl")
    save_path = rebase_path("$target_out_dir")
    module_name = "calib3d"
    args = [
        "--cl_path=$cl_path",
        "--save_path=$save_path",
        "--module_name=$module_name",
        "--target_cpu=$target_cpu",
    ]
    deps = [ "//third_party/opencv/modules/core:libopencv_core" ]
}

ohos_source_set("opencv_calib3d_source") {
    sources = [
        "//third_party/opencv/modules/calib3d/src/ap3p.cpp",
        "//third_party/opencv/modules/calib3d/src/calibinit.cpp",
        "//third_party/opencv/modules/calib3d/src/calibration.cpp",
        "//third_party/opencv/modules/calib3d/src/calibration_handeye.cpp",
        "//third_party/opencv/modules/calib3d/src/checkchessboard.cpp",
        "//third_party/opencv/modules/calib3d/src/chessboard.cpp",
        "//third_party/opencv/modules/calib3d/src/circlesgrid.cpp",
        "//third_party/opencv/modules/calib3d/src/compat_ptsetreg.cpp",
        "//third_party/opencv/modules/calib3d/src/dls.cpp",
        "//third_party/opencv/modules/calib3d/src/epnp.cpp",
        "//third_party/opencv/modules/calib3d/src/fisheye.cpp",
        "//third_party/opencv/modules/calib3d/src/five-point.cpp",
        "//third_party/opencv/modules/calib3d/src/fundam.cpp",
        "//third_party/opencv/modules/calib3d/src/homography_decomp.cpp",
        "//third_party/opencv/modules/calib3d/src/ippe.cpp",
        "//third_party/opencv/modules/calib3d/src/levmarq.cpp",
        "//third_party/opencv/modules/calib3d/src/main.cpp",
        "//third_party/opencv/modules/calib3d/src/p3p.cpp",
        "//third_party/opencv/modules/calib3d/src/polynom_solver.cpp",
        "//third_party/opencv/modules/calib3d/src/posit.cpp",
        "//third_party/opencv/modules/calib3d/src/ptsetreg.cpp",
        "//third_party/opencv/modules/calib3d/src/quadsubpix.cpp",
        "//third_party/opencv/modules/calib3d/src/rho.cpp",
        "//third_party/opencv/modules/calib3d/src/solvepnp.cpp",
        "//third_party/opencv/modules/calib3d/src/sqpnp.cpp",
        "//third_party/opencv/modules/calib3d/src/stereobm.cpp",
        "//third_party/opencv/modules/calib3d/src/stereosgbm.cpp",
        "//third_party/opencv/modules/calib3d/src/triangulate.cpp",
        "//third_party/opencv/modules/calib3d/src/undistort.dispatch.cpp",
        "//third_party/opencv/modules/calib3d/src/upnp.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/degeneracy.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/dls_solver.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/essential_solver.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/estimator.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/fundamental_solver.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/gamma_values.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/homography_solver.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/local_optimization.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/pnp_solver.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/quality.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/ransac_solvers.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/sampler.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/termination.cpp",
        "//third_party/opencv/modules/calib3d/src/usac/utils.cpp",
    ]
    include_dirs = [
        "//third_party/opencv/modules/calib3d/include",
        "//third_party/opencv/modules/core/include",
        "//third_party/opencv/modules/imgproc/include",
        "//third_party/opencv/modules/features2d/include",
        "//third_party/opencv/modules/flann/include",
        "//third_party/opencv/build",
        "//third_party/opencv/build/opencv2",
        "//third_party/opencv/build/modules/calib3d",
        "$target_out_dir",
    ]

    deps = [  
        "//third_party/opencv/modules/core:libopencv_core",
        "//third_party/opencv/modules/imgproc:libopencv_imgproc",
        "//third_party/opencv/modules/flann:libopencv_flann",
        "//third_party/opencv/modules/features2d:libopencv_features2d",
        "//third_party/opencv/3rdparty/carotene:libtegra_hal",
        #":ocv_build_dispatch_undistort",
        ":ocv_cl2cpp_calib3d"
    ]

    configs = [ ":opencv_calib3d_config" ]

    sources += get_target_outputs(":ocv_cl2cpp_calib3d")
}

ohos_shared_library("libopencv_calib3d") {
    deps = [ ":opencv_calib3d_source" ]
    part_name = "opencv"
    subsystem_name = "thirdparty"
}

action("ocv_build_dispatch_undistort") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/undistort_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/calib3d/src")
    save_path = rebase_path("//third_party/opencv/build/modules/calib3d")
    file_name = "undistort"
    optimizations = "SSE2 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = ["//third_party/opencv/modules/core:libopencv_core",]
}

