# Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# opencv imgproc build

import("//build/ohos.gni")
import("//third_party/opencv/opencv_common_cfg.gni")

config("opencv_imgproc_config") {
    cflags_cc = opencv_lib_common_cflags_cc
    defines = opencv_lib_common_defines
}

action("ocv_cl2cpp_imgproc") {
    script = "//third_party/opencv/build_cpp_from_cl.py"
    outputs = [
        "$target_out_dir/opencl_kernels_imgproc.cpp",
        "$target_out_dir/opencl_kernels_imgproc.hpp",
    ]
    cl_path = rebase_path("//third_party/opencv/modules/imgproc/src/opencl")
    save_path = rebase_path("$target_out_dir")
    module_name = "imgproc"
    args = [
        "--cl_path=$cl_path",
        "--save_path=$save_path",
        "--module_name=$module_name",
        "--target_cpu=$target_cpu",
    ]
    deps = ["//third_party/opencv/modules/core:libopencv_core",]
}

ohos_source_set("opencv_imgproc_source") {
    sources = [
        "//third_party/opencv/modules/imgproc/src/accum.cpp",
        "//third_party/opencv/modules/imgproc/src/accum.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/approx.cpp",
        "//third_party/opencv/modules/imgproc/src/bilateral_filter.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/blend.cpp",
        "//third_party/opencv/modules/imgproc/src/box_filter.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/canny.cpp",
        "//third_party/opencv/modules/imgproc/src/clahe.cpp",
        "//third_party/opencv/modules/imgproc/src/color.cpp",
        "//third_party/opencv/modules/imgproc/src/color_hsv.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/color_lab.cpp",
        "//third_party/opencv/modules/imgproc/src/color_rgb.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/color_yuv.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/colormap.cpp",
        "//third_party/opencv/modules/imgproc/src/connectedcomponents.cpp",
        "//third_party/opencv/modules/imgproc/src/contours.cpp",
        "//third_party/opencv/modules/imgproc/src/convhull.cpp",
        "//third_party/opencv/modules/imgproc/src/corner.cpp",
        "//third_party/opencv/modules/imgproc/src/cornersubpix.cpp",
        "//third_party/opencv/modules/imgproc/src/demosaicing.cpp",
        "//third_party/opencv/modules/imgproc/src/deriv.cpp",
        "//third_party/opencv/modules/imgproc/src/distransform.cpp",
        "//third_party/opencv/modules/imgproc/src/drawing.cpp",
        "//third_party/opencv/modules/imgproc/src/emd.cpp",
        "//third_party/opencv/modules/imgproc/src/featureselect.cpp",
        "//third_party/opencv/modules/imgproc/src/filter.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/floodfill.cpp",
        "//third_party/opencv/modules/imgproc/src/gabor.cpp",
        "//third_party/opencv/modules/imgproc/src/generalized_hough.cpp",
        "//third_party/opencv/modules/imgproc/src/geometry.cpp",
        "//third_party/opencv/modules/imgproc/src/grabcut.cpp",
        "//third_party/opencv/modules/imgproc/src/hershey_fonts.cpp",
        "//third_party/opencv/modules/imgproc/src/histogram.cpp",
        "//third_party/opencv/modules/imgproc/src/hough.cpp",
        "//third_party/opencv/modules/imgproc/src/imgwarp.cpp",
        "//third_party/opencv/modules/imgproc/src/intelligent_scissors.cpp",
        "//third_party/opencv/modules/imgproc/src/intersection.cpp",
        "//third_party/opencv/modules/imgproc/src/linefit.cpp",
        "//third_party/opencv/modules/imgproc/src/lsd.cpp",
        "//third_party/opencv/modules/imgproc/src/main.cpp",
        "//third_party/opencv/modules/imgproc/src/matchcontours.cpp",
        "//third_party/opencv/modules/imgproc/src/median_blur.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/min_enclosing_triangle.cpp",
        "//third_party/opencv/modules/imgproc/src/moments.cpp",
        "//third_party/opencv/modules/imgproc/src/morph.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/phasecorr.cpp",
        "//third_party/opencv/modules/imgproc/src/pyramids.cpp",
        "//third_party/opencv/modules/imgproc/src/resize.cpp",
        "//third_party/opencv/modules/imgproc/src/rotcalipers.cpp",
        "//third_party/opencv/modules/imgproc/src/samplers.cpp",
        "//third_party/opencv/modules/imgproc/src/segmentation.cpp",
        "//third_party/opencv/modules/imgproc/src/shapedescr.cpp",
        "//third_party/opencv/modules/imgproc/src/smooth.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/spatialgradient.cpp",
        "//third_party/opencv/modules/imgproc/src/subdivision2d.cpp",
        "//third_party/opencv/modules/imgproc/src/sumpixels.dispatch.cpp",
        "//third_party/opencv/modules/imgproc/src/tables.cpp",
        "//third_party/opencv/modules/imgproc/src/templmatch.cpp",
        "//third_party/opencv/modules/imgproc/src/thresh.cpp",
        "//third_party/opencv/modules/imgproc/src/utils.cpp",
        "//third_party/opencv/modules/imgproc/src/_geom.h",
        "//third_party/opencv/modules/imgproc/src/accum.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/bilateral_filter.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/box_filter.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/ccl_bolelli_forest.inc.hpp",
        "//third_party/opencv/modules/imgproc/src/ccl_bolelli_forest_firstline.inc.hpp",
        "//third_party/opencv/modules/imgproc/src/ccl_bolelli_forest_lastline.inc.hpp",
        "//third_party/opencv/modules/imgproc/src/ccl_bolelli_forest_singleline.inc.hpp",
        "//third_party/opencv/modules/imgproc/src/color.hpp",
        "//third_party/opencv/modules/imgproc/src/color.simd_helpers.hpp",
        "//third_party/opencv/modules/imgproc/src/color_hsv.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/color_rgb.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/color_yuv.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/corner.hpp",
        "//third_party/opencv/modules/imgproc/src/filter.hpp",
        "//third_party/opencv/modules/imgproc/src/filter.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/filterengine.hpp",
        "//third_party/opencv/modules/imgproc/src/fixedpoint.inl.hpp",
        "//third_party/opencv/modules/imgproc/src/hal_replacement.hpp",
        "//third_party/opencv/modules/imgproc/src/imgwarp.hpp",
        "//third_party/opencv/modules/imgproc/src/median_blur.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/morph.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/precomp.hpp",
        "//third_party/opencv/modules/imgproc/src/resize.hpp",
        "//third_party/opencv/modules/imgproc/src/smooth.simd.hpp",
        "//third_party/opencv/modules/imgproc/src/sumpixels.avx512_skx.hpp",
        "//third_party/opencv/modules/imgproc/src/sumpixels.simd.hpp"
    ]

    sources += get_target_outputs(":ocv_cl2cpp_imgproc")

    include_dirs = [
        "//third_party/opencv/modules/imgproc/include",
        "//third_party/opencv/modules/core/include",
        "//third_party/opencv/build/opencv2",
        "//third_party/opencv/build",
        "//third_party/opencv/build/modules/imgproc",
        "$target_out_dir",
    ]

    deps = [  
        #":ocv_build_dispatch_accum",
        ":ocv_cl2cpp_imgproc",
        "//third_party/opencv/modules/core:libopencv_core",
        "//third_party/opencv/3rdparty/carotene:libtegra_hal",
    ]

    configs = [ ":opencv_imgproc_config" ]
}

ohos_shared_library("libopencv_imgproc") {
    deps = [ ":opencv_imgproc_source" ]
    part_name = "opencv"
    subsystem_name = "thirdparty"
}


action("ocv_build_dispatch_accum") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/accum_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "accum"
    optimizations = "SSE4_1 AVX AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_bilateral_filter",]
}
action("ocv_build_dispatch_bilateral_filter") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/bilateral_filter_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "bilateral_filter"
    optimizations = "SSE2 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_box_filter",]
}
action("ocv_build_dispatch_box_filter") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/box_filter_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "box_filter"
    optimizations = "SSE2 SSE4_1 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_filter",]
}
action("ocv_build_dispatch_filter") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/filter_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "filter"
    optimizations = "SSE2 SSE4_1 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_color_hsv",]
}
action("ocv_build_dispatch_color_hsv") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/color_hsv_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "color_hsv"
    optimizations = "SSE2 SSE4_1 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_color_rgb",]
}
action("ocv_build_dispatch_color_rgb") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/color_rgb_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "color_rgb"
    optimizations = "SSE2 SSE4_1 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_color_yuv",]
}
action("ocv_build_dispatch_color_yuv") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/color_yuv_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "color_yuv"
    optimizations = "SSE2 SSE4_1 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_median_blur",]
}
action("ocv_build_dispatch_median_blur") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/median_blur_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "median_blur"
    optimizations = "SSE2 SSE4_1 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_morph",]
}
action("ocv_build_dispatch_morph") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/morph_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "morph"
    optimizations = "SSE2 SSE4_1 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_smooth",]
}
action("ocv_build_dispatch_smooth") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/smooth_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "smooth"
    optimizations = "SSE2 SSE4_1 AVX2"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = [":ocv_build_dispatch_sumpixels",]
}
action("ocv_build_dispatch_sumpixels") {
    script = "//third_party/opencv/build_dispatched_file.py"
    outputs = ["$root_out_dir/sumpixels_log.txt"]
    src_path = rebase_path("//third_party/opencv/modules/imgproc/src")
    save_path = rebase_path("//third_party/opencv/build/modules/imgproc")
    file_name = "sumpixels"
    optimizations = "SSE2 AVX2 AVX512_SKX"
    args = [
        "--src_path=$src_path",
        "--save_path=$save_path",
        "--file_name=$file_name",
        "--optimizations=$optimizations",
        "--target_cpu=$target_cpu",
    ]
    deps = ["//third_party/opencv/modules/core:libopencv_core",]
}

